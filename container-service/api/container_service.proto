syntax = "proto3";

package container_service;
option go_package = "github.com/cicadatesting/container-service/api";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service ContainerService {
    rpc StartContainer (StartContainerRequest) returns (google.protobuf.Empty);
    rpc StopContainer (StopContainerRequest) returns (google.protobuf.Empty);
    rpc StopContainers (StopContainersRequest) returns (google.protobuf.Empty);
    rpc ContainerRunning (DescribeContainerRequest) returns (ContainerRunningResponse);
}

message DockerContainerArgs {
    string image = 1;
    repeated string command = 2;
    map<string, string> env = 3;
    google.protobuf.StringValue network = 4;
}

message KubeContainerArgs {
    string image = 1;
    repeated string command = 2;
    map<string, string> env = 3;
}

message StartContainerRequest {
    string name = 1;
    string namespace = 2;
    map<string, string> labels = 3;
    oneof containerArgs {
        DockerContainerArgs dockerContainerArgs = 4;
        KubeContainerArgs kubeContainerArgs = 5;
    }
}

message StopContainerRequest {
    string name = 1;
    string namespace = 2;
}

message StopContainersRequest {
    string namespace = 1;
    map<string, string> labels = 2;
}

message DescribeContainerRequest {
    string name = 1;
    string namespace = 2;
}

message ContainerRunningResponse {
    bool running = 1;
}


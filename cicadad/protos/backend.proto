syntax = "proto3";

package backend;
option go_package = "github.com/cicadatesting/backend/api";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service Backend {
    rpc CreateTest(CreateTestRequest) returns (CreateTestResponse);
    rpc CreateScenario(CreateScenarioRequest) returns (CreateScenarioResponse);
    rpc CreateUsers(CreateUsersRequest) returns (CreateUsersResponse);
    rpc StopUsers(StopUsersRequest) returns (google.protobuf.Empty);
    rpc CleanTestInstances(CleanTestInstancesRequest) returns (google.protobuf.Empty);
    rpc CheckTestInstance(CheckTestInstanceRequest) returns (CheckTestInstanceResponse);
    rpc AddTestEvent (AddEventRequest) returns (google.protobuf.Empty);
    rpc GetTestEvents (GetEventsRequest) returns (Events);
    rpc AddUserResults (AddUserResultsRequest) returns (google.protobuf.Empty);
    rpc SetScenarioResult (SetScenarioResultRequest) returns (google.protobuf.Empty);
    rpc MoveUserResults (MoveUserResultsRequest) returns (MoveUserResultsResponse);
    rpc MoveScenarioResult (MoveScenarioResultRequest) returns (MoveScenarioResultResponse);
    rpc DistributeWork (DistributeWorkRequest) returns (google.protobuf.Empty);
    rpc GetUserWork (GetUserWorkRequest) returns (GetUserWorkResponse);
    rpc AddUserEvent (AddEventRequest) returns (google.protobuf.Empty);
    rpc GetUserEvents (GetEventsRequest) returns (Events);
    rpc AddMetric (AddMetricRequest) returns (google.protobuf.Empty);
    rpc GetMetricTotal (GetMetricRequest) returns (MetricTotalResponse);
    rpc GetLastMetric (GetMetricRequest) returns (LastMetricResponse);
    rpc GetMetricRate (GetMetricRateRequest) returns (MetricRateResponse);
    rpc GetMetricStatistics (GetMetricRequest) returns (MetricStatisticsResponse);
}

message CreateTestRequest {
    string backendAddress = 1;
    string schedulingMetadata = 2;
    repeated string tags = 3; // tags applied to filter scenario
    map<string, string> env = 4;
}

message CreateTestResponse {
    string testID = 1;
}

message CreateScenarioRequest {
    string testID = 1;
    string scenarioName = 2;
    string context = 3; // NOTE: base64 JSON string
    int32 usersPerInstance = 4;
    repeated string tags = 5; // tags for scenario
}

message CreateScenarioResponse {
    string scenarioID = 1;
}

message CreateUsersRequest {
    string scenarioID = 1;
    string testID = 2;
    int32 amount = 3;
}

// NOTE: be able to return user counts as well

message StopUsersRequest {
    string scenarioID = 1;
    int32 amount = 2;
}

message CleanTestInstancesRequest {
    string testID = 1;
}

message CheckTestInstanceRequest {
    string testID = 1;
    string instanceID = 2;
}

message CheckTestInstanceResponse {
    bool running = 1;
}

message CreateUsersResponse {
    repeated string userManagerIDs = 1;
}

message Event {
    string kind = 1;
    bytes payload = 2; // NOTE: bytes for pickled data sent between test objects
}

message AddEventRequest {
    string id = 1;
    Event event = 2;
}

message GetEventsRequest {
    string id = 1;
    string kind = 2;
}

message Events {
    repeated Event events = 1;
}

message AddUserResultsRequest {
    string userManagerID = 1;
    repeated bytes results = 2;
}

message SetScenarioResultRequest {
    string scenarioID = 1;
    google.protobuf.StringValue output = 2;
    google.protobuf.StringValue exception = 3;
    string logs = 4;
    double timeTaken = 5;
    int32 succeeded = 6;
    int32 failed = 7;
}

message MoveUserResultsRequest {
    string scenarioID = 1;
    int32 limit = 2;
}

message MoveUserResultsResponse {
    repeated bytes results = 1;
}

message MoveScenarioResultRequest {
    string scenarioID = 1;
}

message MoveScenarioResultResponse {
    string id = 1;
    google.protobuf.StringValue output = 2;
    google.protobuf.StringValue exception = 3;
    string logs = 4;
    string timestamp = 5;
    double timeTaken = 6;
    int32 succeeded = 7;
    int32 failed = 8;
}

message DistributeWorkRequest {
    string scenarioID = 1;
    int32 amount = 2;
}

message GetUserWorkRequest {
    string userManagerID = 1;
}

message GetUserWorkResponse {
    int32 work = 1;
}

message AddMetricRequest {
    string scenarioID = 1;
    string name = 2;
    double value = 3;
}

message GetMetricRequest {
    string scenarioID = 1;
    string name = 2;
}

message GetMetricRateRequest {
    string scenarioID = 1;
    string name = 2;
    double splitPoint = 3;
}

message MetricTotalResponse {
    double total = 1;
}

message LastMetricResponse {
    double last = 1;
}

message MetricRateResponse {
    double percentage = 1;
}

message MetricStatisticsResponse {
    double min = 1;
    double max = 2;
    double median = 3;
    double average = 4;
    int64 len = 5;
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatastoreClient is the client API for Datastore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatastoreClient interface {
	AddTestEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTestEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Events, error)
	AddUserResult(ctx context.Context, in *AddUserResultRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetScenarioResult(ctx context.Context, in *SetScenarioResultRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	MoveUserResults(ctx context.Context, in *MoveUserResultsRequest, opts ...grpc.CallOption) (*MoveUserResultsResponse, error)
	MoveScenarioResult(ctx context.Context, in *MoveScenarioResultRequest, opts ...grpc.CallOption) (*MoveScenarioResultResponse, error)
	DistributeWork(ctx context.Context, in *DistributeWorkRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUserWork(ctx context.Context, in *GetUserWorkRequest, opts ...grpc.CallOption) (*GetUserWorkResponse, error)
	AddUserEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUserEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Events, error)
	AddMetric(ctx context.Context, in *AddMetricRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetMetricTotal(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*MetricTotalResponse, error)
	GetLastMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*LastMetricResponse, error)
	GetMetricRate(ctx context.Context, in *GetMetricRateRequest, opts ...grpc.CallOption) (*MetricRateResponse, error)
	GetMetricStatistics(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*MetricStatisticsResponse, error)
}

type datastoreClient struct {
	cc grpc.ClientConnInterface
}

func NewDatastoreClient(cc grpc.ClientConnInterface) DatastoreClient {
	return &datastoreClient{cc}
}

func (c *datastoreClient) AddTestEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/AddTestEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetTestEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/GetTestEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) AddUserResult(ctx context.Context, in *AddUserResultRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/AddUserResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) SetScenarioResult(ctx context.Context, in *SetScenarioResultRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/SetScenarioResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) MoveUserResults(ctx context.Context, in *MoveUserResultsRequest, opts ...grpc.CallOption) (*MoveUserResultsResponse, error) {
	out := new(MoveUserResultsResponse)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/MoveUserResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) MoveScenarioResult(ctx context.Context, in *MoveScenarioResultRequest, opts ...grpc.CallOption) (*MoveScenarioResultResponse, error) {
	out := new(MoveScenarioResultResponse)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/MoveScenarioResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) DistributeWork(ctx context.Context, in *DistributeWorkRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/DistributeWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetUserWork(ctx context.Context, in *GetUserWorkRequest, opts ...grpc.CallOption) (*GetUserWorkResponse, error) {
	out := new(GetUserWorkResponse)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/GetUserWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) AddUserEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/AddUserEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetUserEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/GetUserEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) AddMetric(ctx context.Context, in *AddMetricRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/AddMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetMetricTotal(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*MetricTotalResponse, error) {
	out := new(MetricTotalResponse)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/GetMetricTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetLastMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*LastMetricResponse, error) {
	out := new(LastMetricResponse)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/GetLastMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetMetricRate(ctx context.Context, in *GetMetricRateRequest, opts ...grpc.CallOption) (*MetricRateResponse, error) {
	out := new(MetricRateResponse)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/GetMetricRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetMetricStatistics(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*MetricStatisticsResponse, error) {
	out := new(MetricStatisticsResponse)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/GetMetricStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatastoreServer is the server API for Datastore service.
// All implementations must embed UnimplementedDatastoreServer
// for forward compatibility
type DatastoreServer interface {
	AddTestEvent(context.Context, *AddEventRequest) (*empty.Empty, error)
	GetTestEvents(context.Context, *GetEventsRequest) (*Events, error)
	AddUserResult(context.Context, *AddUserResultRequest) (*empty.Empty, error)
	SetScenarioResult(context.Context, *SetScenarioResultRequest) (*empty.Empty, error)
	MoveUserResults(context.Context, *MoveUserResultsRequest) (*MoveUserResultsResponse, error)
	MoveScenarioResult(context.Context, *MoveScenarioResultRequest) (*MoveScenarioResultResponse, error)
	DistributeWork(context.Context, *DistributeWorkRequest) (*empty.Empty, error)
	GetUserWork(context.Context, *GetUserWorkRequest) (*GetUserWorkResponse, error)
	AddUserEvent(context.Context, *AddEventRequest) (*empty.Empty, error)
	GetUserEvents(context.Context, *GetEventsRequest) (*Events, error)
	AddMetric(context.Context, *AddMetricRequest) (*empty.Empty, error)
	GetMetricTotal(context.Context, *GetMetricRequest) (*MetricTotalResponse, error)
	GetLastMetric(context.Context, *GetMetricRequest) (*LastMetricResponse, error)
	GetMetricRate(context.Context, *GetMetricRateRequest) (*MetricRateResponse, error)
	GetMetricStatistics(context.Context, *GetMetricRequest) (*MetricStatisticsResponse, error)
	mustEmbedUnimplementedDatastoreServer()
}

// UnimplementedDatastoreServer must be embedded to have forward compatible implementations.
type UnimplementedDatastoreServer struct {
}

func (UnimplementedDatastoreServer) AddTestEvent(context.Context, *AddEventRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTestEvent not implemented")
}
func (UnimplementedDatastoreServer) GetTestEvents(context.Context, *GetEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestEvents not implemented")
}
func (UnimplementedDatastoreServer) AddUserResult(context.Context, *AddUserResultRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserResult not implemented")
}
func (UnimplementedDatastoreServer) SetScenarioResult(context.Context, *SetScenarioResultRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScenarioResult not implemented")
}
func (UnimplementedDatastoreServer) MoveUserResults(context.Context, *MoveUserResultsRequest) (*MoveUserResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveUserResults not implemented")
}
func (UnimplementedDatastoreServer) MoveScenarioResult(context.Context, *MoveScenarioResultRequest) (*MoveScenarioResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveScenarioResult not implemented")
}
func (UnimplementedDatastoreServer) DistributeWork(context.Context, *DistributeWorkRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeWork not implemented")
}
func (UnimplementedDatastoreServer) GetUserWork(context.Context, *GetUserWorkRequest) (*GetUserWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWork not implemented")
}
func (UnimplementedDatastoreServer) AddUserEvent(context.Context, *AddEventRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserEvent not implemented")
}
func (UnimplementedDatastoreServer) GetUserEvents(context.Context, *GetEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEvents not implemented")
}
func (UnimplementedDatastoreServer) AddMetric(context.Context, *AddMetricRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetric not implemented")
}
func (UnimplementedDatastoreServer) GetMetricTotal(context.Context, *GetMetricRequest) (*MetricTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricTotal not implemented")
}
func (UnimplementedDatastoreServer) GetLastMetric(context.Context, *GetMetricRequest) (*LastMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMetric not implemented")
}
func (UnimplementedDatastoreServer) GetMetricRate(context.Context, *GetMetricRateRequest) (*MetricRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricRate not implemented")
}
func (UnimplementedDatastoreServer) GetMetricStatistics(context.Context, *GetMetricRequest) (*MetricStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricStatistics not implemented")
}
func (UnimplementedDatastoreServer) mustEmbedUnimplementedDatastoreServer() {}

// UnsafeDatastoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatastoreServer will
// result in compilation errors.
type UnsafeDatastoreServer interface {
	mustEmbedUnimplementedDatastoreServer()
}

func RegisterDatastoreServer(s grpc.ServiceRegistrar, srv DatastoreServer) {
	s.RegisterService(&Datastore_ServiceDesc, srv)
}

func _Datastore_AddTestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).AddTestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/AddTestEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).AddTestEvent(ctx, req.(*AddEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetTestEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetTestEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/GetTestEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetTestEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_AddUserResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).AddUserResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/AddUserResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).AddUserResult(ctx, req.(*AddUserResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_SetScenarioResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetScenarioResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).SetScenarioResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/SetScenarioResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).SetScenarioResult(ctx, req.(*SetScenarioResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_MoveUserResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveUserResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).MoveUserResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/MoveUserResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).MoveUserResults(ctx, req.(*MoveUserResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_MoveScenarioResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveScenarioResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).MoveScenarioResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/MoveScenarioResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).MoveScenarioResult(ctx, req.(*MoveScenarioResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_DistributeWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).DistributeWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/DistributeWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).DistributeWork(ctx, req.(*DistributeWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetUserWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetUserWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/GetUserWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetUserWork(ctx, req.(*GetUserWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_AddUserEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).AddUserEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/AddUserEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).AddUserEvent(ctx, req.(*AddEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetUserEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetUserEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/GetUserEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetUserEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_AddMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).AddMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/AddMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).AddMetric(ctx, req.(*AddMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetMetricTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetMetricTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/GetMetricTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetMetricTotal(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetLastMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetLastMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/GetLastMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetLastMetric(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetMetricRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetMetricRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/GetMetricRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetMetricRate(ctx, req.(*GetMetricRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetMetricStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetMetricStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/GetMetricStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetMetricStatistics(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Datastore_ServiceDesc is the grpc.ServiceDesc for Datastore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Datastore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datastore.Datastore",
	HandlerType: (*DatastoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTestEvent",
			Handler:    _Datastore_AddTestEvent_Handler,
		},
		{
			MethodName: "GetTestEvents",
			Handler:    _Datastore_GetTestEvents_Handler,
		},
		{
			MethodName: "AddUserResult",
			Handler:    _Datastore_AddUserResult_Handler,
		},
		{
			MethodName: "SetScenarioResult",
			Handler:    _Datastore_SetScenarioResult_Handler,
		},
		{
			MethodName: "MoveUserResults",
			Handler:    _Datastore_MoveUserResults_Handler,
		},
		{
			MethodName: "MoveScenarioResult",
			Handler:    _Datastore_MoveScenarioResult_Handler,
		},
		{
			MethodName: "DistributeWork",
			Handler:    _Datastore_DistributeWork_Handler,
		},
		{
			MethodName: "GetUserWork",
			Handler:    _Datastore_GetUserWork_Handler,
		},
		{
			MethodName: "AddUserEvent",
			Handler:    _Datastore_AddUserEvent_Handler,
		},
		{
			MethodName: "GetUserEvents",
			Handler:    _Datastore_GetUserEvents_Handler,
		},
		{
			MethodName: "AddMetric",
			Handler:    _Datastore_AddMetric_Handler,
		},
		{
			MethodName: "GetMetricTotal",
			Handler:    _Datastore_GetMetricTotal_Handler,
		},
		{
			MethodName: "GetLastMetric",
			Handler:    _Datastore_GetLastMetric_Handler,
		},
		{
			MethodName: "GetMetricRate",
			Handler:    _Datastore_GetMetricRate_Handler,
		},
		{
			MethodName: "GetMetricStatistics",
			Handler:    _Datastore_GetMetricStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/datastore.proto",
}

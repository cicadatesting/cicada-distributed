// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendClient interface {
	CreateTest(ctx context.Context, in *CreateTestRequest, opts ...grpc.CallOption) (*CreateTestResponse, error)
	CreateScenario(ctx context.Context, in *CreateScenarioRequest, opts ...grpc.CallOption) (*CreateScenarioResponse, error)
	CreateUsers(ctx context.Context, in *CreateUsersRequest, opts ...grpc.CallOption) (*CreateUsersResponse, error)
	StopUsers(ctx context.Context, in *StopUsersRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CleanTestInstances(ctx context.Context, in *CleanTestInstancesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddTestEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetTestEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Events, error)
	AddUserResults(ctx context.Context, in *AddUserResultsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetScenarioResult(ctx context.Context, in *SetScenarioResultRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	MoveUserResults(ctx context.Context, in *MoveUserResultsRequest, opts ...grpc.CallOption) (*MoveUserResultsResponse, error)
	MoveScenarioResult(ctx context.Context, in *MoveScenarioResultRequest, opts ...grpc.CallOption) (*MoveScenarioResultResponse, error)
	DistributeWork(ctx context.Context, in *DistributeWorkRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUserWork(ctx context.Context, in *GetUserWorkRequest, opts ...grpc.CallOption) (*GetUserWorkResponse, error)
	AddUserEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetUserEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Events, error)
	AddMetric(ctx context.Context, in *AddMetricRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetMetricTotal(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*MetricTotalResponse, error)
	GetLastMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*LastMetricResponse, error)
	GetMetricRate(ctx context.Context, in *GetMetricRateRequest, opts ...grpc.CallOption) (*MetricRateResponse, error)
	GetMetricStatistics(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*MetricStatisticsResponse, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) CreateTest(ctx context.Context, in *CreateTestRequest, opts ...grpc.CallOption) (*CreateTestResponse, error) {
	out := new(CreateTestResponse)
	err := c.cc.Invoke(ctx, "/backend.Backend/CreateTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) CreateScenario(ctx context.Context, in *CreateScenarioRequest, opts ...grpc.CallOption) (*CreateScenarioResponse, error) {
	out := new(CreateScenarioResponse)
	err := c.cc.Invoke(ctx, "/backend.Backend/CreateScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) CreateUsers(ctx context.Context, in *CreateUsersRequest, opts ...grpc.CallOption) (*CreateUsersResponse, error) {
	out := new(CreateUsersResponse)
	err := c.cc.Invoke(ctx, "/backend.Backend/CreateUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) StopUsers(ctx context.Context, in *StopUsersRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/backend.Backend/StopUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) CleanTestInstances(ctx context.Context, in *CleanTestInstancesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/backend.Backend/CleanTestInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) AddTestEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/backend.Backend/AddTestEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetTestEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/backend.Backend/GetTestEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) AddUserResults(ctx context.Context, in *AddUserResultsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/backend.Backend/AddUserResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) SetScenarioResult(ctx context.Context, in *SetScenarioResultRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/backend.Backend/SetScenarioResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) MoveUserResults(ctx context.Context, in *MoveUserResultsRequest, opts ...grpc.CallOption) (*MoveUserResultsResponse, error) {
	out := new(MoveUserResultsResponse)
	err := c.cc.Invoke(ctx, "/backend.Backend/MoveUserResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) MoveScenarioResult(ctx context.Context, in *MoveScenarioResultRequest, opts ...grpc.CallOption) (*MoveScenarioResultResponse, error) {
	out := new(MoveScenarioResultResponse)
	err := c.cc.Invoke(ctx, "/backend.Backend/MoveScenarioResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) DistributeWork(ctx context.Context, in *DistributeWorkRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/backend.Backend/DistributeWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetUserWork(ctx context.Context, in *GetUserWorkRequest, opts ...grpc.CallOption) (*GetUserWorkResponse, error) {
	out := new(GetUserWorkResponse)
	err := c.cc.Invoke(ctx, "/backend.Backend/GetUserWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) AddUserEvent(ctx context.Context, in *AddEventRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/backend.Backend/AddUserEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetUserEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, "/backend.Backend/GetUserEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) AddMetric(ctx context.Context, in *AddMetricRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/backend.Backend/AddMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetMetricTotal(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*MetricTotalResponse, error) {
	out := new(MetricTotalResponse)
	err := c.cc.Invoke(ctx, "/backend.Backend/GetMetricTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetLastMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*LastMetricResponse, error) {
	out := new(LastMetricResponse)
	err := c.cc.Invoke(ctx, "/backend.Backend/GetLastMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetMetricRate(ctx context.Context, in *GetMetricRateRequest, opts ...grpc.CallOption) (*MetricRateResponse, error) {
	out := new(MetricRateResponse)
	err := c.cc.Invoke(ctx, "/backend.Backend/GetMetricRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetMetricStatistics(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*MetricStatisticsResponse, error) {
	out := new(MetricStatisticsResponse)
	err := c.cc.Invoke(ctx, "/backend.Backend/GetMetricStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
// All implementations must embed UnimplementedBackendServer
// for forward compatibility
type BackendServer interface {
	CreateTest(context.Context, *CreateTestRequest) (*CreateTestResponse, error)
	CreateScenario(context.Context, *CreateScenarioRequest) (*CreateScenarioResponse, error)
	CreateUsers(context.Context, *CreateUsersRequest) (*CreateUsersResponse, error)
	StopUsers(context.Context, *StopUsersRequest) (*empty.Empty, error)
	CleanTestInstances(context.Context, *CleanTestInstancesRequest) (*empty.Empty, error)
	AddTestEvent(context.Context, *AddEventRequest) (*empty.Empty, error)
	GetTestEvents(context.Context, *GetEventsRequest) (*Events, error)
	AddUserResults(context.Context, *AddUserResultsRequest) (*empty.Empty, error)
	SetScenarioResult(context.Context, *SetScenarioResultRequest) (*empty.Empty, error)
	MoveUserResults(context.Context, *MoveUserResultsRequest) (*MoveUserResultsResponse, error)
	MoveScenarioResult(context.Context, *MoveScenarioResultRequest) (*MoveScenarioResultResponse, error)
	DistributeWork(context.Context, *DistributeWorkRequest) (*empty.Empty, error)
	GetUserWork(context.Context, *GetUserWorkRequest) (*GetUserWorkResponse, error)
	AddUserEvent(context.Context, *AddEventRequest) (*empty.Empty, error)
	GetUserEvents(context.Context, *GetEventsRequest) (*Events, error)
	AddMetric(context.Context, *AddMetricRequest) (*empty.Empty, error)
	GetMetricTotal(context.Context, *GetMetricRequest) (*MetricTotalResponse, error)
	GetLastMetric(context.Context, *GetMetricRequest) (*LastMetricResponse, error)
	GetMetricRate(context.Context, *GetMetricRateRequest) (*MetricRateResponse, error)
	GetMetricStatistics(context.Context, *GetMetricRequest) (*MetricStatisticsResponse, error)
	mustEmbedUnimplementedBackendServer()
}

// UnimplementedBackendServer must be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (UnimplementedBackendServer) CreateTest(context.Context, *CreateTestRequest) (*CreateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTest not implemented")
}
func (UnimplementedBackendServer) CreateScenario(context.Context, *CreateScenarioRequest) (*CreateScenarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScenario not implemented")
}
func (UnimplementedBackendServer) CreateUsers(context.Context, *CreateUsersRequest) (*CreateUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsers not implemented")
}
func (UnimplementedBackendServer) StopUsers(context.Context, *StopUsersRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopUsers not implemented")
}
func (UnimplementedBackendServer) CleanTestInstances(context.Context, *CleanTestInstancesRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanTestInstances not implemented")
}
func (UnimplementedBackendServer) AddTestEvent(context.Context, *AddEventRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTestEvent not implemented")
}
func (UnimplementedBackendServer) GetTestEvents(context.Context, *GetEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestEvents not implemented")
}
func (UnimplementedBackendServer) AddUserResults(context.Context, *AddUserResultsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserResults not implemented")
}
func (UnimplementedBackendServer) SetScenarioResult(context.Context, *SetScenarioResultRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScenarioResult not implemented")
}
func (UnimplementedBackendServer) MoveUserResults(context.Context, *MoveUserResultsRequest) (*MoveUserResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveUserResults not implemented")
}
func (UnimplementedBackendServer) MoveScenarioResult(context.Context, *MoveScenarioResultRequest) (*MoveScenarioResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveScenarioResult not implemented")
}
func (UnimplementedBackendServer) DistributeWork(context.Context, *DistributeWorkRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeWork not implemented")
}
func (UnimplementedBackendServer) GetUserWork(context.Context, *GetUserWorkRequest) (*GetUserWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWork not implemented")
}
func (UnimplementedBackendServer) AddUserEvent(context.Context, *AddEventRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserEvent not implemented")
}
func (UnimplementedBackendServer) GetUserEvents(context.Context, *GetEventsRequest) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEvents not implemented")
}
func (UnimplementedBackendServer) AddMetric(context.Context, *AddMetricRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMetric not implemented")
}
func (UnimplementedBackendServer) GetMetricTotal(context.Context, *GetMetricRequest) (*MetricTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricTotal not implemented")
}
func (UnimplementedBackendServer) GetLastMetric(context.Context, *GetMetricRequest) (*LastMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMetric not implemented")
}
func (UnimplementedBackendServer) GetMetricRate(context.Context, *GetMetricRateRequest) (*MetricRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricRate not implemented")
}
func (UnimplementedBackendServer) GetMetricStatistics(context.Context, *GetMetricRequest) (*MetricStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricStatistics not implemented")
}
func (UnimplementedBackendServer) mustEmbedUnimplementedBackendServer() {}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_CreateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).CreateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/CreateTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).CreateTest(ctx, req.(*CreateTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_CreateScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).CreateScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/CreateScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).CreateScenario(ctx, req.(*CreateScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_CreateUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).CreateUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/CreateUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).CreateUsers(ctx, req.(*CreateUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_StopUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).StopUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/StopUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).StopUsers(ctx, req.(*StopUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_CleanTestInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanTestInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).CleanTestInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/CleanTestInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).CleanTestInstances(ctx, req.(*CleanTestInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_AddTestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).AddTestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/AddTestEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).AddTestEvent(ctx, req.(*AddEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetTestEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetTestEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/GetTestEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetTestEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_AddUserResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).AddUserResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/AddUserResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).AddUserResults(ctx, req.(*AddUserResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_SetScenarioResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetScenarioResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).SetScenarioResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/SetScenarioResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).SetScenarioResult(ctx, req.(*SetScenarioResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_MoveUserResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveUserResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).MoveUserResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/MoveUserResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).MoveUserResults(ctx, req.(*MoveUserResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_MoveScenarioResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveScenarioResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).MoveScenarioResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/MoveScenarioResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).MoveScenarioResult(ctx, req.(*MoveScenarioResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_DistributeWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).DistributeWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/DistributeWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).DistributeWork(ctx, req.(*DistributeWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetUserWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetUserWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/GetUserWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetUserWork(ctx, req.(*GetUserWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_AddUserEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).AddUserEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/AddUserEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).AddUserEvent(ctx, req.(*AddEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetUserEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetUserEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/GetUserEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetUserEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_AddMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).AddMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/AddMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).AddMetric(ctx, req.(*AddMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetMetricTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetMetricTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/GetMetricTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetMetricTotal(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetLastMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetLastMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/GetLastMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetLastMetric(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetMetricRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetMetricRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/GetMetricRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetMetricRate(ctx, req.(*GetMetricRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetMetricStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetMetricStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.Backend/GetMetricStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetMetricStatistics(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTest",
			Handler:    _Backend_CreateTest_Handler,
		},
		{
			MethodName: "CreateScenario",
			Handler:    _Backend_CreateScenario_Handler,
		},
		{
			MethodName: "CreateUsers",
			Handler:    _Backend_CreateUsers_Handler,
		},
		{
			MethodName: "StopUsers",
			Handler:    _Backend_StopUsers_Handler,
		},
		{
			MethodName: "CleanTestInstances",
			Handler:    _Backend_CleanTestInstances_Handler,
		},
		{
			MethodName: "AddTestEvent",
			Handler:    _Backend_AddTestEvent_Handler,
		},
		{
			MethodName: "GetTestEvents",
			Handler:    _Backend_GetTestEvents_Handler,
		},
		{
			MethodName: "AddUserResults",
			Handler:    _Backend_AddUserResults_Handler,
		},
		{
			MethodName: "SetScenarioResult",
			Handler:    _Backend_SetScenarioResult_Handler,
		},
		{
			MethodName: "MoveUserResults",
			Handler:    _Backend_MoveUserResults_Handler,
		},
		{
			MethodName: "MoveScenarioResult",
			Handler:    _Backend_MoveScenarioResult_Handler,
		},
		{
			MethodName: "DistributeWork",
			Handler:    _Backend_DistributeWork_Handler,
		},
		{
			MethodName: "GetUserWork",
			Handler:    _Backend_GetUserWork_Handler,
		},
		{
			MethodName: "AddUserEvent",
			Handler:    _Backend_AddUserEvent_Handler,
		},
		{
			MethodName: "GetUserEvents",
			Handler:    _Backend_GetUserEvents_Handler,
		},
		{
			MethodName: "AddMetric",
			Handler:    _Backend_AddMetric_Handler,
		},
		{
			MethodName: "GetMetricTotal",
			Handler:    _Backend_GetMetricTotal_Handler,
		},
		{
			MethodName: "GetLastMetric",
			Handler:    _Backend_GetLastMetric_Handler,
		},
		{
			MethodName: "GetMetricRate",
			Handler:    _Backend_GetMetricRate_Handler,
		},
		{
			MethodName: "GetMetricStatistics",
			Handler:    _Backend_GetMetricStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/backend.proto",
}
